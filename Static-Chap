#!/bin/bash
#set -x

# Default Chapter Length in Min if -s option NOT used
Value="5"

# Text Colors
BoRed=$(tput bold; tput setaf 1)
Bogreen=$(tput bold; tput setaf 28)
green=$(tput setaf 28)
purple=$(tput setaf 128)
brown=$(tput setaf 130)
yellow=$(tput setaf 226)
red=$(tput setaf 1)
white=$(tput setaf 15)
Lpurple=$(tput setaf 99)
blue=$(tput setaf 21)
pink=$(tput setaf 200)
Lblue=$(tput setaf 117)
orange=$(tput setaf 166)
Lorange=$(tput setaf 215)
reset=$(tput sgr0) #  Reset text attributes to normal
invis=$(tput civis) # Invisable Cursor
norm=$(tput cnorm) # Reset Invisable Cursor

# If option -s is given use the supplied argument for the Balck Detect Value. If not use Default Value.
while getopts ":s:" opt; do
  case $opt in
    s)
      Value="$OPTARG" >&2; shift "$(($OPTIND -1))"
      ;;
    \?)
      printf "%b\n" "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

FileName="${1}"

# Filename Argument
mapfile -t -d '' -O 1 < <(find "${FileName}" -maxdepth 1 \( -name "*.mkv" \) -print0 | sort -z) Files

# Requirements Check
REQUIRES="ffprobe mkvpropedit"

Dep_Check()
{
# Check that required tools are installed
for tool in ${REQUIRES}; do
    if ! [ -x "$(command -v ${tool})" ]; then
        printf "%b\n" ${red}  "Error: ${tool} is not installed or not in your path. ${tool} is required.${reset}\n" >&2
        exit 1
    fi
done
}

RM_Temp()
{
printf "%b\n"
if [ -f Chapters.txt ]; then
	rm Chapters.txt
	printf "%b" ${red} "*** Removing temp file Chapters.txt ***" "\n"
fi
if [ -f Chapters-Final.txt ]; then
	rm Chapters-Final.txt
	printf "%b" ${red} "*** Removing temp file Chapters-Final.txt ***" "\n"
fi
}


Control_C()
# run if user hits control+c
{
tput el1
  printf "%b\n" ${orange} "  *** CTRL+C Detected ***" "\n"
  RM_Temp
printf "%b" ${reset}${norm}
  exit $?
}

Convert_Seconds()
{
 H=$(bc <<< "${1}/3600")
 M=$(bc <<< "(${1}%3600)/60")
 S=$(bc <<< "${1}%60")
 printf "%02d:%02d:%05.3f\n" $H $M $S
}


Chapter_Gen()
{

FileCount=1

while [[ "${FileCount}" -le "${#Files[@]}" ]]; do
Chap_Sec=$(printf "%b\n" "${Value}"*60 | bc)
Duration_Sec=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "${Files[$FileCount]}")
No_Chapters=$(printf "%b\n" "${Duration_Sec}"/"${Chap_Sec}" | bc)
Duration_Min=$(Convert_Seconds "${Duration_Sec}")

# Debug
printf "%b\n"
printf "%b\n" ${blue}"========================================================================\n"
printf "%b" ${red} "File ${FileCount} of ${#Files[@]} ${white}----> ${Lpurple}  ${Files[$FileCount]##*/}\n"
printf "%b\n" ${orange} "Requested Chapter Length	${Value} Min\n"
printf "%b\n" "Chapter Length in Seconds	${Chap_Sec}\n"
printf "%b\n" "Movie Duration in Seconds 	${Duration_Sec}\n"
printf "%b\n" "Movie Duration in HH:MM:SS 	${Duration_Min}\n"
printf "%b\n" "Number of Chapters		$(( ${No_Chapters}+1 ))\n"

printf "%b\n" "00:00:00.000" > Chapters.txt

No_Chapters=$(( No_Chapters +1 ))
mapfile -t -O 1 < <(seq -f %02g 1 "${No_Chapters}") chapter_marker

Count=1
Next_Chap="${Chap_Sec}"
while [[ "${Count}" -lt "${No_Chapters}" ]]; do
	Convert_Seconds "${Next_Chap}" >> Chapters.txt
	#printf "%b\n" "${Chap_Sec}"
	(( Count ++ ))
	Next_Chap=$(( Chap_Sec*Count ))
done

Count=1
while read -r Chapter; do
   printf "%b\n" CHAPTER"${chapter_marker[Count]}=$Chapter" >> Chapters-Final.txt
   printf "%b\n" CHAPTER"${chapter_marker[Count]}NAME=Chapter ${chapter_marker[Count]}" >> Chapters-Final.txt
   (( Count ++ ))
done < <(cat Chapters.txt)

printf "%b\n" ${green}
cat Chapters-Final.txt
printf "%b\n" ${yellow} "Inserting New Chapters ${purple}\n"
mkvpropedit -c Chapters-Final.txt "${Files[$FileCount]}"
printf "%b" ${reset}
(( FileCount ++ ))
RM_Temp
done
}
Dep_Check
trap Control_C SIGINT
Chapter_Gen
RM_Temp
